# SPDX-FileCopyrightText: : 2017-2023 The PyPSA-Eur Authors
#
# SPDX-License-Identifier: MIT

from os.path import normpath, exists
from shutil import copyfile, move, rmtree

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

from snakemake.utils import min_version

min_version("7.7")

configfile: "config.remind.yaml"

COSTS = f"data/costs_{config['costs']['year']}.csv"  # TODO: only from REMIND?
ATLITE_NPROCESSES = config["atlite"].get("nprocesses", 4)

run = config.get("run", {})
RDIR = run["name"] + "/" if run.get("name") else ""
CDIR = RDIR if not run.get("shared_cutouts") else ""

LOGS = "logs/" + RDIR
BENCHMARKS = "benchmarks/" + RDIR
RESOURCES = "resources/" + RDIR if not run.get("shared_resources") else "resources/"
RESULTS = "results/" + RDIR

# REMIND option passed from command line
remind_opt = config.get("opt")  # Either "prepare" or "solve"

localrules:
    purge,


wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?|all",
    ll="(v|c)([0-9\.]+|opt)",
    opts="[-+a-zA-Z0-9\.]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",
    year="2[01][0-9][05]"


include: "rules/common.smk"
#include: "rules/collect.smk"
#include: "rules/retrieve.smk"

# This part contains all rules, which don't need data from REMIND
# Essentially, this creates all input data for the rule "add_electricity"
# Snakemake needs to be called once with this setting before calling it with REMINDopt == "solve" from REIMND iteratively
# Command: snakemake -call prepare_files_remind -s Snakefile_remind --config REMINDopt=prepare
if remind_opt == "prepare":

    include: "rules/retrieve.smk"
    include: "rules/build_electricity.smk"
    include: "rules/prepare_for_remind.smk"

# This part contains all rules, which get data from REMIND between iterations
# Snakemake is called iteratively from REMIND with REMINDopt == "solve"
# Example command: snakemake -call solve_all_networks_remind -s Snakefile_remind --config REMINDopt=solve iter=1
if remind_opt == "solve":

    # REMIND run name passed from command line
    RDIR_remind = config.get("RDIR_remind", {}) + "/"
    # Directories that are specific for each REMIND run
    LOGS_remind = "logs/" + RDIR_remind
    BENCHMARKS_remind = "benchmarks/" + RDIR_remind
    RESOURCES_remind = "resources/" + RDIR_remind
    RESULTS_remind = "results/" + RDIR_remind

    include: "rules/solve_for_remind.smk"

#include: "rules/build_electricity.smk"
#include: "rules/build_sector.smk"
#include: "rules/solve_electricity.smk"
#include: "rules/postprocess.smk"

rule purge:
    message:
        "Purging generated resources, results and docs. Downloads are kept."
    run:
        rmtree("resources/", ignore_errors=True)
        rmtree("results/", ignore_errors=True)
        rmtree("doc/_build", ignore_errors=True)


rule dag:
    message:
        "Creating DAG of workflow."
    output:
        dot=RESOURCES + "dag.dot",
        pdf=RESOURCES + "dag.pdf",
        png=RESOURCES + "dag.png",
    conda:
        "envs/environment.yaml"
    shell:
        """
        snakemake --rulegraph all | sed -n "/digraph/,\$p" > {output.dot}
        dot -Tpdf -o {output.pdf} {output.dot}
        dot -Tpng -o {output.png} {output.dot}
        """


rule doc:
    message:
        "Build documentation."
    output:
        directory("doc/_build"),
    shell:
        "make -C doc html"
